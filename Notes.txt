[HTML, HYPERTEXT MARKUP LANGUAGE] 
    Determines the structure of documents and webpages; the bones of
    the website.
    Semantic HTML - using tags in their appropriate places/contexts


[HTML DOCUMENT BOILERPLATE]
    *Within index.HTML*
    Doctype - tells server what version of HTML (standard shown is HTML5) 
        <!DOCTYPE html>    
    Root element - all other elements descend from this <html lang="en"> </html>
    Head element - container for meta-information <head> </head>
    Charset encoding - allows server to display characters <meta charset="utf-8">
    Webpage title element - <title> </title>

    <!DOCTYPE html>
    <html lang="en">
        <head>
            <meta charset="UTF-8">
            <title>My First Webpage</title>
        </head>
        <body>
            *elements intended for display here*
        </body>
    </html>


[LINKING RESOURCES]
    Anchor element - links to other resources using href attribute (hypertext reference)
        *defaults to opening resource in same tab
        *target attribute handles where the resource opens Ex. target="_blank" (new tab)
        *relation attribute handles the relation between the current page and linked 
            resource Ex. rel="noopener noreferrer" (no access to page and no knowledge of 
            which page opened it, good security measure against phishing)
        <a href="https://www.theodinproject.com" target="_blank" rel="noopener 
            noreferrer">click me</a>
    Absolute Link - directs user to a different website; contains "protocol://domain/path"
        <a href="https://www.theodinproject.com/about">click me</a>
    Relative Links - directs user to a new page within site; does not contain domain
    	<a href="./pages/about.html">About</a>
        *Good practice to not crowd index.html at root, create directory for further pages*

    Image element - links to images using src (source) attribute; can be local or external
        *Img element should include an alt (alternative text) attribute which acts as a
            placeholder for the image when not visible and provides a description such that
            screenreaders for the blind can announce it*
        <img src="https://www.theodinproject.com/mstile-310x310.png" alt="Odin Project Logo">
        <img src="./images/dog.jpg" alt="Pug wearing a scarf">
    Accessing these resources from parent directories is a matter of pointing in the 
        correct direction, "../" accomplishes this.
        <img src="../images/dog.jpg" alt="Pug wearing a scarf">
    *Images used for web purposes are primarily one of four types: JPG, GIF, PNG, or SVG*


[CSS CASCADING STYLE SHEETS]
    Styles the HTML bones for display using selectors.
    External CSS Link - file "styles.css" within root directory, then within index.js head:
        <head>
           <link rel="stylesheet" href="styles.css" />
        </head>
    Internal CSS - within index.js head, use opening/closing "style" elements with CSS inside
        <head>
            <style>.a{color:pink;}</style>
        </head>
    Inline CSS - written directly within html elements
        <div style="color: white;">...</div>

    Universal Selector (*) - selects all html elements within body
    Type Selector - called using the html element name, will select all of that type
    Class Selector (.) - selects all elements given the correspondent class within the 
        element's attributes
    ID Selector (#) - selects the single element given the correspondent id within the
        element's attributes
    *When selectors share several common values we can give those values to a shared CSS
        declaration with a comma separating the selector names. Thus, we cut down repetition
    *Good practice to use camel-case or a dash to handle multi-word selector names

    Ex. Chaining Selection same initial "a" class but select second "b" class:
        CSS:    a.b{
                    color: pink;
                }   
        HTML:   <div>
                    <div class="a b"></div>
                    <div class="a c"></div>
                </div>
    Ex. Chaining Selection same initial "a" class but select second "b" ID:
        CSS:    a#b{
                    color: pink;
                }

    Descendant Combinator - this will only select items of the second class for which
        the first class is an ancestor (parent, grandparent, etc) of the second.
        Ex. .ancestor .contents{color:pink;}        will only select "contents" for those
            descendants of "ancestor" class
        *Can string multiple descendant classes of ancestral first 

    Specificity - CSS declarations that are more specific take precedence over less 
        specific; inline css being the most specific
    Inheritance - certain CSS properties pass from parents down through their descendants,
        especially typographical properties.
    *Under tie-breaking conditions, there is the Rule Order, that "last defined" properties
        become final to break tie conflict

    CSS Box Model - all html elements are rectangles on the page, position is determined by 
        padding, margin, and borders
    Block Elements -elements stack on each other, each on a new line 
    Inline Elements - elements stack next to each other, on the same line
    Div - default block-line element, often used as a container
    Span - default inline element, typically used to group text or when no other html is
        semantically correct
    Inline-block vs inline - height and width to replace floater property


[CSS FLEXBOX]
    Flexbox Model - current default tool for positioning elements on a page. Default 
        along the main axis (horizontal)
    Assuming "container" element with children elements 
        .container{
            display: flex;
            flex-direction: *row or column*
            justify-content: *determines spacing on main axis*
            align-items: *determines spacing on cross-axis*
            flex-wrap: *wrap such that the items won't squeeze together*
            align-content: *only with wrapping property, handles cross-axis*
            gap: *produces gap between elements*
        }
        .child-1{
            flex-grow: *growth proportionally, if there is space to do so*
            flex-shrink: *shrink proportionally, an item w/ 0 will refuse to shrink*
            flex-basis: *overwrites pre-declared sizing*
            flex: *shorthand of grow, shrink, and basis. Be clear to set static values to 0*
            align-self: *overwrites align-item parent property for self*
            order: *can overwrite html default positioning*
        }

    